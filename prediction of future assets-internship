{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b36800e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     PriceDt  AstId    CurrPrc  OpenPrc  close    high     low      volume\n",
      "0 2024-07-08   4733  40.590168    40.93  40.62  41.040  40.290  1017535810\n",
      "1 2024-07-07   4733  40.410000    40.93  40.41  40.955  40.290    23488968\n",
      "2 2024-07-05   4733  40.538473    41.02  40.90  41.200  40.290   525814912\n",
      "3 2024-07-03   4733  40.924038    41.02  40.93  41.200  39.960   737422299\n",
      "4 2024-07-02   4733  40.416730    40.00  40.93  40.960  39.675  1399402887\n",
      "Index(['PriceDt', 'AstId', 'CurrPrc', 'OpenPrc', 'close', 'high', 'low',\n",
      "       'volume'],\n",
      "      dtype='object')\n",
      "            AstId    CurrPrc  OpenPrc  close    high     low      volume  \\\n",
      "PriceDt                                                                    \n",
      "2024-07-08   4733  40.590168    40.93  40.62  41.040  40.290  1017535810   \n",
      "2024-07-07   4733  40.410000    40.93  40.41  40.955  40.290    23488968   \n",
      "2024-07-05   4733  40.538473    41.02  40.90  41.200  40.290   525814912   \n",
      "2024-07-03   4733  40.924038    41.02  40.93  41.200  39.960   737422299   \n",
      "2024-07-02   4733  40.416730    40.00  40.93  40.960  39.675  1399402887   \n",
      "...           ...        ...      ...    ...     ...     ...         ...   \n",
      "2019-03-28   4733  27.190241    27.20  27.33  27.410  26.945   432204280   \n",
      "2019-03-27   4733  27.107465    27.15  27.21  27.370  26.880  1045429484   \n",
      "2019-03-26   4733  27.100558    27.15  27.21  27.380  26.610  1891761629   \n",
      "2018-08-24   4733  30.895000    30.94   0.00  31.080  30.850    25713239   \n",
      "2018-07-25   4733  30.830000    30.85  30.83  31.110  30.650           2   \n",
      "\n",
      "            10-day-MA  \n",
      "PriceDt                \n",
      "2024-07-08        NaN  \n",
      "2024-07-07        NaN  \n",
      "2024-07-05        NaN  \n",
      "2024-07-03        NaN  \n",
      "2024-07-02        NaN  \n",
      "...               ...  \n",
      "2019-03-28  28.593136  \n",
      "2019-03-27  28.408030  \n",
      "2019-03-26  28.227089  \n",
      "2018-08-24  28.404864  \n",
      "2018-07-25  28.575777  \n",
      "\n",
      "[1446 rows x 8 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "file_path = r'C:\\Users\\Avilipsa\\Downloads\\Price_Hist.xlsx'\n",
    "# Read the Excel file (default to the first sheet)\n",
    "df = pd.read_excel(file_path, sheet_name='Sheet2')\n",
    "# Display the first few rows of the dataframe\n",
    "print(df.head())\n",
    "print(df.columns)\n",
    "df['PriceDt'] = pd.to_datetime(df['PriceDt'])\n",
    "df.set_index('PriceDt', inplace=True)\n",
    "# Calculate moving average\n",
    "df['10-day-MA'] = df['CurrPrc'].rolling(window=10).mean()\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d27388e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            AstId    CurrPrc  OpenPrc  close    high     low      volume  \\\n",
      "PriceDt                                                                    \n",
      "2024-07-08   4733  40.590168    40.93  40.62  41.040  40.290  1017535810   \n",
      "2024-07-07   4733  40.410000    40.93  40.41  40.955  40.290    23488968   \n",
      "2024-07-05   4733  40.538473    41.02  40.90  41.200  40.290   525814912   \n",
      "2024-07-03   4733  40.924038    41.02  40.93  41.200  39.960   737422299   \n",
      "2024-07-02   4733  40.416730    40.00  40.93  40.960  39.675  1399402887   \n",
      "...           ...        ...      ...    ...     ...     ...         ...   \n",
      "2019-03-28   4733  27.190241    27.20  27.33  27.410  26.945   432204280   \n",
      "2019-03-27   4733  27.107465    27.15  27.21  27.370  26.880  1045429484   \n",
      "2019-03-26   4733  27.100558    27.15  27.21  27.380  26.610  1891761629   \n",
      "2018-08-24   4733  30.895000    30.94   0.00  31.080  30.850    25713239   \n",
      "2018-07-25   4733  30.830000    30.85  30.83  31.110  30.650           2   \n",
      "\n",
      "            10-day-MA  50-day-MA  \n",
      "PriceDt                           \n",
      "2024-07-08        NaN        NaN  \n",
      "2024-07-07        NaN        NaN  \n",
      "2024-07-05        NaN        NaN  \n",
      "2024-07-03        NaN        NaN  \n",
      "2024-07-02        NaN        NaN  \n",
      "...               ...        ...  \n",
      "2019-03-28  28.593136  28.960766  \n",
      "2019-03-27  28.408030  28.946444  \n",
      "2019-03-26  28.227089  28.931443  \n",
      "2018-08-24  28.404864  28.994684  \n",
      "2018-07-25  28.575777  29.077327  \n",
      "\n",
      "[1446 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "df['50-day-MA']=df['CurrPrc'].rolling(window=50).mean()\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "46aa513a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            AstId    CurrPrc  OpenPrc  close    high     low      volume  \\\n",
      "PriceDt                                                                    \n",
      "2024-07-08   4733  40.590168    40.93  40.62  41.040  40.290  1017535810   \n",
      "2024-07-07   4733  40.410000    40.93  40.41  40.955  40.290    23488968   \n",
      "2024-07-05   4733  40.538473    41.02  40.90  41.200  40.290   525814912   \n",
      "2024-07-03   4733  40.924038    41.02  40.93  41.200  39.960   737422299   \n",
      "2024-07-02   4733  40.416730    40.00  40.93  40.960  39.675  1399402887   \n",
      "...           ...        ...      ...    ...     ...     ...         ...   \n",
      "2019-03-28   4733  27.190241    27.20  27.33  27.410  26.945   432204280   \n",
      "2019-03-27   4733  27.107465    27.15  27.21  27.370  26.880  1045429484   \n",
      "2019-03-26   4733  27.100558    27.15  27.21  27.380  26.610  1891761629   \n",
      "2018-08-24   4733  30.895000    30.94   0.00  31.080  30.850    25713239   \n",
      "2018-07-25   4733  30.830000    30.85  30.83  31.110  30.650           2   \n",
      "\n",
      "            10-day-MA  50-day-MA  \n",
      "PriceDt                           \n",
      "2024-07-08        NaN        NaN  \n",
      "2024-07-07        NaN        NaN  \n",
      "2024-07-05        NaN        NaN  \n",
      "2024-07-03        NaN        NaN  \n",
      "2024-07-02        NaN        NaN  \n",
      "...               ...        ...  \n",
      "2019-03-28  28.593136  28.960766  \n",
      "2019-03-27  28.408030  28.946444  \n",
      "2019-03-26  28.227089  28.931443  \n",
      "2018-08-24  28.404864  28.994684  \n",
      "2018-07-25  28.575777  29.077327  \n",
      "\n",
      "[1446 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "df_filled = df.fillna(method='ffill')\n",
    "print(df_filled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c35a0e54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             AstId    CurrPrc  OpenPrc  close    high    low        volume  \\\n",
      "PriceDt                                                                      \n",
      "2018-07-25  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-26     NaN        NaN      NaN    NaN     NaN    NaN           NaN   \n",
      "2018-07-27     NaN        NaN      NaN    NaN     NaN    NaN           NaN   \n",
      "2018-07-28     NaN        NaN      NaN    NaN     NaN    NaN           NaN   \n",
      "2018-07-29     NaN        NaN      NaN    NaN     NaN    NaN           NaN   \n",
      "...            ...        ...      ...    ...     ...    ...           ...   \n",
      "2024-07-04     NaN        NaN      NaN    NaN     NaN    NaN           NaN   \n",
      "2024-07-05  4733.0  40.538473    41.02  40.90  41.200  40.29  5.258149e+08   \n",
      "2024-07-06     NaN        NaN      NaN    NaN     NaN    NaN           NaN   \n",
      "2024-07-07  4733.0  40.410000    40.93  40.41  40.955  40.29  2.348897e+07   \n",
      "2024-07-08  4733.0  40.590168    40.93  40.62  41.040  40.29  1.017536e+09   \n",
      "\n",
      "            10-day-MA  50-day-MA  \n",
      "PriceDt                           \n",
      "2018-07-25  28.575777  29.077327  \n",
      "2018-07-26        NaN        NaN  \n",
      "2018-07-27        NaN        NaN  \n",
      "2018-07-28        NaN        NaN  \n",
      "2018-07-29        NaN        NaN  \n",
      "...               ...        ...  \n",
      "2024-07-04        NaN        NaN  \n",
      "2024-07-05        NaN        NaN  \n",
      "2024-07-06        NaN        NaN  \n",
      "2024-07-07        NaN        NaN  \n",
      "2024-07-08        NaN        NaN  \n",
      "\n",
      "[2176 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "# Generate a complete date range\n",
    "date_range = pd.date_range(start=df.index.min(), end=df.index.max())\n",
    "# Reindex the dataframe to include the full date range\n",
    "df = df.reindex(date_range, fill_value=np.nan)\n",
    "df.index.name = 'PriceDt'\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2c1740a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             AstId    CurrPrc  OpenPrc  close    high    low        volume  \\\n",
      "PriceDt                                                                      \n",
      "2018-07-25  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-26  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-27  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-28  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-29  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "...            ...        ...      ...    ...     ...    ...           ...   \n",
      "2024-07-04  4733.0  40.924038    41.02  40.93  41.200  39.96  7.374223e+08   \n",
      "2024-07-05  4733.0  40.538473    41.02  40.90  41.200  40.29  5.258149e+08   \n",
      "2024-07-06  4733.0  40.538473    41.02  40.90  41.200  40.29  5.258149e+08   \n",
      "2024-07-07  4733.0  40.410000    40.93  40.41  40.955  40.29  2.348897e+07   \n",
      "2024-07-08  4733.0  40.590168    40.93  40.62  41.040  40.29  1.017536e+09   \n",
      "\n",
      "            10-day-MA  50-day-MA  \n",
      "PriceDt                           \n",
      "2018-07-25  28.575777  29.077327  \n",
      "2018-07-26  28.575777  29.077327  \n",
      "2018-07-27  28.575777  29.077327  \n",
      "2018-07-28  28.575777  29.077327  \n",
      "2018-07-29  28.575777  29.077327  \n",
      "...               ...        ...  \n",
      "2024-07-04  40.005119  39.379665  \n",
      "2024-07-05  40.005119  39.379665  \n",
      "2024-07-06  40.005119  39.379665  \n",
      "2024-07-07  40.005119  39.379665  \n",
      "2024-07-08  40.005119  39.379665  \n",
      "\n",
      "[2176 rows x 9 columns]\n"
     ]
    }
   ],
   "source": [
    "#df_filled = df.interpolate(method='linear')\n",
    "df_filled = df.fillna(method='ffill')\n",
    "print(df_filled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c5be7acb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas_ta in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (0.3.14b0)\n",
      "Requirement already satisfied: pandas in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (from pandas_ta) (1.5.3)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (from pandas->pandas_ta) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (from pandas->pandas_ta) (2022.7)\n",
      "Requirement already satisfied: numpy>=1.21.0 in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (from pandas->pandas_ta) (1.24.3)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.1->pandas->pandas_ta) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pandas_ta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eab18acc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             AstId    CurrPrc  OpenPrc  close    high    low        volume  \\\n",
      "PriceDt                                                                      \n",
      "2018-07-25  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-26  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-27  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-28  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-29  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "...            ...        ...      ...    ...     ...    ...           ...   \n",
      "2024-07-04  4733.0  40.924038    41.02  40.93  41.200  39.96  7.374223e+08   \n",
      "2024-07-05  4733.0  40.538473    41.02  40.90  41.200  40.29  5.258149e+08   \n",
      "2024-07-06  4733.0  40.538473    41.02  40.90  41.200  40.29  5.258149e+08   \n",
      "2024-07-07  4733.0  40.410000    40.93  40.41  40.955  40.29  2.348897e+07   \n",
      "2024-07-08  4733.0  40.590168    40.93  40.62  41.040  40.29  1.017536e+09   \n",
      "\n",
      "            10-day-MA  50-day-MA        RSI      MACD  MACD_Signal  MACD_Hist  \\\n",
      "PriceDt                                                                         \n",
      "2018-07-25  28.575777  29.077327        NaN       NaN          NaN        NaN   \n",
      "2018-07-26  28.575777  29.077327        NaN       NaN          NaN        NaN   \n",
      "2018-07-27  28.575777  29.077327        NaN       NaN          NaN        NaN   \n",
      "2018-07-28  28.575777  29.077327        NaN       NaN          NaN        NaN   \n",
      "2018-07-29  28.575777  29.077327        NaN       NaN          NaN        NaN   \n",
      "...               ...        ...        ...       ...          ...        ...   \n",
      "2024-07-04  40.005119  39.379665  69.039603  0.285335     0.162065   0.123270   \n",
      "2024-07-05  40.005119  39.379665  68.269171  0.318516     0.193356   0.125161   \n",
      "2024-07-06  40.005119  39.379665  68.269171  0.340882     0.222861   0.118022   \n",
      "2024-07-07  40.005119  39.379665  56.356161  0.315433     0.241375   0.074058   \n",
      "2024-07-08  40.005119  39.379665  59.609186  0.308651     0.254830   0.053821   \n",
      "\n",
      "            Bollinger_Upper  Bollinger_Middle  Bollinger_Lower  \n",
      "PriceDt                                                         \n",
      "2018-07-25              NaN               NaN              NaN  \n",
      "2018-07-26              NaN               NaN              NaN  \n",
      "2018-07-27              NaN               NaN              NaN  \n",
      "2018-07-28              NaN               NaN              NaN  \n",
      "2018-07-29              NaN               NaN              NaN  \n",
      "...                     ...               ...              ...  \n",
      "2024-07-04        41.283152            40.076        38.868848  \n",
      "2024-07-05        41.466527            40.164        38.861473  \n",
      "2024-07-06        41.570980            40.316        39.061020  \n",
      "2024-07-07        41.466478            40.432        39.397522  \n",
      "2024-07-08        41.455128            40.517        39.578872  \n",
      "\n",
      "[2176 rows x 16 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas_ta as ta\n",
    "# Calculate RSI (Relative Strength Index)\n",
    "df_filled['RSI'] = ta.rsi(df_filled['close'], length=14)\n",
    "\n",
    "# Calculate MACD (Moving Average Convergence Divergence)\n",
    "macd = ta.macd(df_filled['close'], fast=12, slow=26, signal=9)\n",
    "df_filled['MACD'] = macd['MACD_12_26_9']\n",
    "df_filled['MACD_Signal'] = macd['MACDs_12_26_9']\n",
    "df_filled['MACD_Hist'] = macd['MACDh_12_26_9']\n",
    "\n",
    "# Calculate Bollinger Bands\n",
    "bollinger = ta.bbands(df_filled['close'], length=10, std=2)\n",
    "df_filled['Bollinger_Upper'] = bollinger['BBU_10_2.0']\n",
    "df_filled['Bollinger_Middle'] = bollinger['BBM_10_2.0']\n",
    "df_filled['Bollinger_Lower'] = bollinger['BBL_10_2.0']\n",
    "\n",
    "print(df_filled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4a368033",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             AstId    CurrPrc  OpenPrc  close    high    low        volume  \\\n",
      "PriceDt                                                                      \n",
      "2018-07-25  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-26  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-27  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-28  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "2018-07-29  4733.0  30.830000    30.85  30.83  31.110  30.65  2.000000e+00   \n",
      "...            ...        ...      ...    ...     ...    ...           ...   \n",
      "2024-07-04  4733.0  40.924038    41.02  40.93  41.200  39.96  7.374223e+08   \n",
      "2024-07-05  4733.0  40.538473    41.02  40.90  41.200  40.29  5.258149e+08   \n",
      "2024-07-06  4733.0  40.538473    41.02  40.90  41.200  40.29  5.258149e+08   \n",
      "2024-07-07  4733.0  40.410000    40.93  40.41  40.955  40.29  2.348897e+07   \n",
      "2024-07-08  4733.0  40.590168    40.93  40.62  41.040  40.29  1.017536e+09   \n",
      "\n",
      "            10-day-MA  50-day-MA        RSI      MACD  MACD_Signal  MACD_Hist  \\\n",
      "PriceDt                                                                         \n",
      "2018-07-25  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-26  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-27  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-28  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-29  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "...               ...        ...        ...       ...          ...        ...   \n",
      "2024-07-04  40.005119  39.379665  63.505747  0.285335     0.162065   0.123270   \n",
      "2024-07-05  40.005119  39.379665  62.962963  0.318516     0.193356   0.125161   \n",
      "2024-07-06  40.005119  39.379665  62.962963  0.340882     0.222861   0.118022   \n",
      "2024-07-07  40.005119  39.379665  63.142857  0.315433     0.241375   0.074058   \n",
      "2024-07-08  40.005119  39.379665  59.433962  0.308651     0.254830   0.053821   \n",
      "\n",
      "            Bollinger_Upper  Bollinger_Middle  Bollinger_Lower  MACD_Line  \n",
      "PriceDt                                                                    \n",
      "2018-07-25              NaN               NaN              NaN   0.000000  \n",
      "2018-07-26              NaN               NaN              NaN   0.000000  \n",
      "2018-07-27              NaN               NaN              NaN   0.000000  \n",
      "2018-07-28              NaN               NaN              NaN   0.000000  \n",
      "2018-07-29              NaN               NaN              NaN   0.000000  \n",
      "...                     ...               ...              ...        ...  \n",
      "2024-07-04        40.953145           39.9125        38.871855   0.285335  \n",
      "2024-07-05        41.076301           39.9945        38.912699   0.318516  \n",
      "2024-07-06        41.172412           40.0765        38.980588   0.340882  \n",
      "2024-07-07        41.193110           40.1215        39.049890   0.315433  \n",
      "2024-07-08        41.245175           40.1530        39.060825   0.308651  \n",
      "\n",
      "[2176 rows x 17 columns]\n"
     ]
    }
   ],
   "source": [
    "# Function to calculate Bollinger Bands\n",
    "def calculate_bollinger_bands(df, window=20, num_std=2):\n",
    "    df['Bollinger_Middle'] = df['close'].rolling(window=window).mean()\n",
    "    df['Bollinger_Std'] = df['close'].rolling(window=window).std()\n",
    "    df['Bollinger_Upper'] = df['Bollinger_Middle'] + (df['Bollinger_Std'] * num_std)\n",
    "    df['Bollinger_Lower'] = df['Bollinger_Middle'] - (df['Bollinger_Std'] * num_std)\n",
    "    df.drop(columns=['Bollinger_Std'], inplace=True)\n",
    "    return df\n",
    "# Function to calculate MACD\n",
    "def calculate_macd(df, short_window=12, long_window=26, signal_window=9):\n",
    "    df['EMA12'] = df['close'].ewm(span=short_window, adjust=False).mean()\n",
    "    df['EMA26'] = df['close'].ewm(span=long_window, adjust=False).mean()\n",
    "    df['MACD_Line'] = df['EMA12'] - df['EMA26']\n",
    "    df['MACD_Signal'] = df['MACD_Line'].ewm(span=signal_window, adjust=False).mean()\n",
    "    df['MACD_Hist'] = df['MACD_Line'] - df['MACD_Signal']\n",
    "    df.drop(columns=['EMA12', 'EMA26'], inplace=True)\n",
    "    return df\n",
    "# Function to calculate RSI\n",
    "def calculate_rsi(df, window=14):\n",
    "    delta = df['close'].diff()\n",
    "    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()\n",
    "    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()\n",
    "    rs = gain / loss\n",
    "    df['RSI'] = 100 - (100 / (1 + rs))\n",
    "    return df\n",
    "\n",
    "df_filled = calculate_bollinger_bands(df_filled)\n",
    "df_filled['Bollinger_Upper'].fillna(method='ffill', inplace=True)\n",
    "df_filled['Bollinger_Middle'].fillna(method='ffill', inplace=True)\n",
    "df_filled['Bollinger_Lower'].fillna(method='ffill', inplace=True)\n",
    "\n",
    "# Impute MACD\n",
    "df_filled = calculate_macd(df_filled)\n",
    "df_filled['MACD_Line'].fillna(method='ffill', inplace=True)\n",
    "df_filled['MACD_Signal'].fillna(method='ffill', inplace=True)\n",
    "df_filled['MACD_Hist'].fillna(method='ffill', inplace=True)\n",
    "\n",
    "# Impute RSI\n",
    "df_filled = calculate_rsi(df_filled)\n",
    "df_filled['RSI'].fillna(method='ffill', inplace=True)\n",
    "\n",
    "print(df_filled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4e7acf0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: scikit-learn in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (1.2.2)\n",
      "Requirement already satisfied: numpy>=1.17.3 in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (from scikit-learn) (1.24.3)\n",
      "Requirement already satisfied: scipy>=1.3.2 in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (from scikit-learn) (1.10.1)\n",
      "Requirement already satisfied: joblib>=1.1.1 in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (from scikit-learn) (1.2.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\avilipsa\\anaconda3\\lib\\site-packages (from scikit-learn) (2.2.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install scikit-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "21a56538",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Set:\n",
      "             AstId    CurrPrc  OpenPrc  close    high     low       volume  \\\n",
      "PriceDt                                                                      \n",
      "2018-07-25  4733.0  30.830000    30.85  30.83  31.110  30.650          2.0   \n",
      "2018-07-26  4733.0  30.830000    30.85  30.83  31.110  30.650          2.0   \n",
      "2018-07-27  4733.0  30.830000    30.85  30.83  31.110  30.650          2.0   \n",
      "2018-07-28  4733.0  30.830000    30.85  30.83  31.110  30.650          2.0   \n",
      "2018-07-29  4733.0  30.830000    30.85  30.83  31.110  30.650          2.0   \n",
      "...            ...        ...      ...    ...     ...     ...          ...   \n",
      "2023-04-25  4733.0  29.080461    29.79  29.76  29.900  28.815  989586607.0   \n",
      "2023-04-26  4733.0  28.660450    29.45  28.84  29.533  28.300  926054540.0   \n",
      "2023-04-27  4733.0  28.841471    28.76  28.89  29.080  28.300  904585571.0   \n",
      "2023-04-28  4733.0  29.144829    28.53  28.89  29.430  28.510  540124168.0   \n",
      "2023-04-29  4733.0  29.144829    28.53  28.89  29.430  28.510  540124168.0   \n",
      "\n",
      "            10-day-MA  50-day-MA        RSI      MACD  MACD_Signal  MACD_Hist  \\\n",
      "PriceDt                                                                         \n",
      "2018-07-25  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-26  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-27  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-28  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-29  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "...               ...        ...        ...       ...          ...        ...   \n",
      "2023-04-25  28.396999  28.389946  67.796610  0.289878     0.166943   0.122936   \n",
      "2023-04-26  28.248941  28.384534  51.679587  0.204402     0.174435   0.029968   \n",
      "2023-04-27  28.119820  28.393551  54.376658  0.139093     0.167366  -0.028273   \n",
      "2023-04-28  27.967746  28.399952  54.376658  0.086340     0.151161  -0.064821   \n",
      "2023-04-29  27.967746  28.399952  54.376658  0.044025     0.129734  -0.085709   \n",
      "\n",
      "            Bollinger_Upper  Bollinger_Middle  Bollinger_Lower  MACD_Line  \n",
      "PriceDt                                                                    \n",
      "2018-07-25              NaN               NaN              NaN   0.000000  \n",
      "2018-07-26              NaN               NaN              NaN   0.000000  \n",
      "2018-07-27              NaN               NaN              NaN   0.000000  \n",
      "2018-07-28              NaN               NaN              NaN   0.000000  \n",
      "2018-07-29              NaN               NaN              NaN   0.000000  \n",
      "...                     ...               ...              ...        ...  \n",
      "2023-04-25        31.087338           29.0920        27.096662   0.289878  \n",
      "2023-04-26        31.053600           29.1420        27.230400   0.204402  \n",
      "2023-04-27        31.010841           29.1945        27.378159   0.139093  \n",
      "2023-04-28        30.956024           29.2470        27.537976   0.086340  \n",
      "2023-04-29        30.886705           29.2995        27.712295   0.044025  \n",
      "\n",
      "[1740 rows x 17 columns]\n",
      "\n",
      "Testing Set:\n",
      "             AstId    CurrPrc  OpenPrc  close    high      low        volume  \\\n",
      "PriceDt                                                                        \n",
      "2023-04-30  4733.0  29.144829    28.53  28.89  29.430  28.5100  5.401242e+08   \n",
      "2023-05-01  4733.0  29.235092    29.50  29.28  29.540  28.5100  1.140287e+09   \n",
      "2023-05-02  4733.0  28.119270    29.50  29.04  29.540  27.7100  1.734070e+09   \n",
      "2023-05-03  4733.0  28.154282    28.85  28.16  28.855  27.7100  8.724129e+08   \n",
      "2023-05-04  4733.0  27.255170    28.16  27.86  28.500  26.8328  1.253533e+09   \n",
      "...            ...        ...      ...    ...     ...      ...           ...   \n",
      "2024-07-04  4733.0  40.924038    41.02  40.93  41.200  39.9600  7.374223e+08   \n",
      "2024-07-05  4733.0  40.538473    41.02  40.90  41.200  40.2900  5.258149e+08   \n",
      "2024-07-06  4733.0  40.538473    41.02  40.90  41.200  40.2900  5.258149e+08   \n",
      "2024-07-07  4733.0  40.410000    40.93  40.41  40.955  40.2900  2.348897e+07   \n",
      "2024-07-08  4733.0  40.590168    40.93  40.62  41.040  40.2900  1.017536e+09   \n",
      "\n",
      "            10-day-MA  50-day-MA        RSI      MACD  MACD_Signal  MACD_Hist  \\\n",
      "PriceDt                                                                         \n",
      "2023-04-30  27.967746  28.399952  54.376658  0.010371     0.105861  -0.095491   \n",
      "2023-05-01  27.764782  28.383789  26.808511  0.014996     0.087688  -0.072692   \n",
      "2023-05-02  27.594068  28.370466  18.333333 -0.000696     0.070011  -0.070707   \n",
      "2023-05-03  27.524283  28.381400  13.414634 -0.083182     0.039373  -0.122555   \n",
      "2023-05-04  27.551550  28.394807  14.285714 -0.170791    -0.002660  -0.168131   \n",
      "...               ...        ...        ...       ...          ...        ...   \n",
      "2024-07-04  40.005119  39.379665  63.505747  0.285335     0.162065   0.123270   \n",
      "2024-07-05  40.005119  39.379665  62.962963  0.318516     0.193356   0.125161   \n",
      "2024-07-06  40.005119  39.379665  62.962963  0.340882     0.222861   0.118022   \n",
      "2024-07-07  40.005119  39.379665  63.142857  0.315433     0.241375   0.074058   \n",
      "2024-07-08  40.005119  39.379665  59.433962  0.308651     0.254830   0.053821   \n",
      "\n",
      "            Bollinger_Upper  Bollinger_Middle  Bollinger_Lower  MACD_Line  \n",
      "PriceDt                                                                    \n",
      "2023-04-30        30.815305           29.3470        27.878695   0.010371  \n",
      "2023-05-01        30.813561           29.3755        27.937439   0.014996  \n",
      "2023-05-02        30.805269           29.3920        27.978731  -0.000696  \n",
      "2023-05-03        30.844908           29.3720        27.899092  -0.083182  \n",
      "2023-05-04        30.920282           29.3370        27.753718  -0.170791  \n",
      "...                     ...               ...              ...        ...  \n",
      "2024-07-04        40.953145           39.9125        38.871855   0.285335  \n",
      "2024-07-05        41.076301           39.9945        38.912699   0.318516  \n",
      "2024-07-06        41.172412           40.0765        38.980588   0.340882  \n",
      "2024-07-07        41.193110           40.1215        39.049890   0.315433  \n",
      "2024-07-08        41.245175           40.1530        39.060825   0.308651  \n",
      "\n",
      "[436 rows x 17 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "# Assuming your DataFrame is named df_filled and indexed by PriceDt (date)\n",
    "# df_filled = your_dataframe\n",
    "df_filled.sort_index(inplace=True)\n",
    "# Calculate the index for splitting\n",
    "split_idx = int(len(df_filled) * 0.8)\n",
    "# Split the DataFrame\n",
    "train_df = df_filled.iloc[:split_idx]\n",
    "test_df = df_filled.iloc[split_idx:]\n",
    "# Display the result\n",
    "print(\"Training Set:\")\n",
    "print(train_df)\n",
    "print(\"\\nTesting Set:\")\n",
    "print(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ee8e4f52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Set Features:\n",
      "             AstId    CurrPrc  OpenPrc    high     low       volume  \\\n",
      "PriceDt                                                               \n",
      "2018-07-25  4733.0  30.830000    30.85  31.110  30.650          2.0   \n",
      "2018-07-26  4733.0  30.830000    30.85  31.110  30.650          2.0   \n",
      "2018-07-27  4733.0  30.830000    30.85  31.110  30.650          2.0   \n",
      "2018-07-28  4733.0  30.830000    30.85  31.110  30.650          2.0   \n",
      "2018-07-29  4733.0  30.830000    30.85  31.110  30.650          2.0   \n",
      "...            ...        ...      ...     ...     ...          ...   \n",
      "2023-04-25  4733.0  29.080461    29.79  29.900  28.815  989586607.0   \n",
      "2023-04-26  4733.0  28.660450    29.45  29.533  28.300  926054540.0   \n",
      "2023-04-27  4733.0  28.841471    28.76  29.080  28.300  904585571.0   \n",
      "2023-04-28  4733.0  29.144829    28.53  29.430  28.510  540124168.0   \n",
      "2023-04-29  4733.0  29.144829    28.53  29.430  28.510  540124168.0   \n",
      "\n",
      "            10-day-MA  50-day-MA        RSI      MACD  MACD_Signal  MACD_Hist  \\\n",
      "PriceDt                                                                         \n",
      "2018-07-25  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-26  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-27  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-28  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "2018-07-29  28.575777  29.077327        NaN       NaN     0.000000   0.000000   \n",
      "...               ...        ...        ...       ...          ...        ...   \n",
      "2023-04-25  28.396999  28.389946  67.796610  0.289878     0.166943   0.122936   \n",
      "2023-04-26  28.248941  28.384534  51.679587  0.204402     0.174435   0.029968   \n",
      "2023-04-27  28.119820  28.393551  54.376658  0.139093     0.167366  -0.028273   \n",
      "2023-04-28  27.967746  28.399952  54.376658  0.086340     0.151161  -0.064821   \n",
      "2023-04-29  27.967746  28.399952  54.376658  0.044025     0.129734  -0.085709   \n",
      "\n",
      "            Bollinger_Upper  Bollinger_Middle  Bollinger_Lower  MACD_Line  \n",
      "PriceDt                                                                    \n",
      "2018-07-25              NaN               NaN              NaN   0.000000  \n",
      "2018-07-26              NaN               NaN              NaN   0.000000  \n",
      "2018-07-27              NaN               NaN              NaN   0.000000  \n",
      "2018-07-28              NaN               NaN              NaN   0.000000  \n",
      "2018-07-29              NaN               NaN              NaN   0.000000  \n",
      "...                     ...               ...              ...        ...  \n",
      "2023-04-25        31.087338           29.0920        27.096662   0.289878  \n",
      "2023-04-26        31.053600           29.1420        27.230400   0.204402  \n",
      "2023-04-27        31.010841           29.1945        27.378159   0.139093  \n",
      "2023-04-28        30.956024           29.2470        27.537976   0.086340  \n",
      "2023-04-29        30.886705           29.2995        27.712295   0.044025  \n",
      "\n",
      "[1740 rows x 16 columns]\n",
      "\n",
      "Training Set Target:\n",
      "PriceDt\n",
      "2018-07-25    30.83\n",
      "2018-07-26    30.83\n",
      "2018-07-27    30.83\n",
      "2018-07-28    30.83\n",
      "2018-07-29    30.83\n",
      "              ...  \n",
      "2023-04-25    29.76\n",
      "2023-04-26    28.84\n",
      "2023-04-27    28.89\n",
      "2023-04-28    28.89\n",
      "2023-04-29    28.89\n",
      "Freq: D, Name: close, Length: 1740, dtype: float64\n",
      "\n",
      "Testing Set Features:\n",
      "             AstId    CurrPrc  OpenPrc    high      low        volume  \\\n",
      "PriceDt                                                                 \n",
      "2023-04-30  4733.0  29.144829    28.53  29.430  28.5100  5.401242e+08   \n",
      "2023-05-01  4733.0  29.235092    29.50  29.540  28.5100  1.140287e+09   \n",
      "2023-05-02  4733.0  28.119270    29.50  29.540  27.7100  1.734070e+09   \n",
      "2023-05-03  4733.0  28.154282    28.85  28.855  27.7100  8.724129e+08   \n",
      "2023-05-04  4733.0  27.255170    28.16  28.500  26.8328  1.253533e+09   \n",
      "...            ...        ...      ...     ...      ...           ...   \n",
      "2024-07-04  4733.0  40.924038    41.02  41.200  39.9600  7.374223e+08   \n",
      "2024-07-05  4733.0  40.538473    41.02  41.200  40.2900  5.258149e+08   \n",
      "2024-07-06  4733.0  40.538473    41.02  41.200  40.2900  5.258149e+08   \n",
      "2024-07-07  4733.0  40.410000    40.93  40.955  40.2900  2.348897e+07   \n",
      "2024-07-08  4733.0  40.590168    40.93  41.040  40.2900  1.017536e+09   \n",
      "\n",
      "            10-day-MA  50-day-MA        RSI      MACD  MACD_Signal  MACD_Hist  \\\n",
      "PriceDt                                                                         \n",
      "2023-04-30  27.967746  28.399952  54.376658  0.010371     0.105861  -0.095491   \n",
      "2023-05-01  27.764782  28.383789  26.808511  0.014996     0.087688  -0.072692   \n",
      "2023-05-02  27.594068  28.370466  18.333333 -0.000696     0.070011  -0.070707   \n",
      "2023-05-03  27.524283  28.381400  13.414634 -0.083182     0.039373  -0.122555   \n",
      "2023-05-04  27.551550  28.394807  14.285714 -0.170791    -0.002660  -0.168131   \n",
      "...               ...        ...        ...       ...          ...        ...   \n",
      "2024-07-04  40.005119  39.379665  63.505747  0.285335     0.162065   0.123270   \n",
      "2024-07-05  40.005119  39.379665  62.962963  0.318516     0.193356   0.125161   \n",
      "2024-07-06  40.005119  39.379665  62.962963  0.340882     0.222861   0.118022   \n",
      "2024-07-07  40.005119  39.379665  63.142857  0.315433     0.241375   0.074058   \n",
      "2024-07-08  40.005119  39.379665  59.433962  0.308651     0.254830   0.053821   \n",
      "\n",
      "            Bollinger_Upper  Bollinger_Middle  Bollinger_Lower  MACD_Line  \n",
      "PriceDt                                                                    \n",
      "2023-04-30        30.815305           29.3470        27.878695   0.010371  \n",
      "2023-05-01        30.813561           29.3755        27.937439   0.014996  \n",
      "2023-05-02        30.805269           29.3920        27.978731  -0.000696  \n",
      "2023-05-03        30.844908           29.3720        27.899092  -0.083182  \n",
      "2023-05-04        30.920282           29.3370        27.753718  -0.170791  \n",
      "...                     ...               ...              ...        ...  \n",
      "2024-07-04        40.953145           39.9125        38.871855   0.285335  \n",
      "2024-07-05        41.076301           39.9945        38.912699   0.318516  \n",
      "2024-07-06        41.172412           40.0765        38.980588   0.340882  \n",
      "2024-07-07        41.193110           40.1215        39.049890   0.315433  \n",
      "2024-07-08        41.245175           40.1530        39.060825   0.308651  \n",
      "\n",
      "[436 rows x 16 columns]\n",
      "\n",
      "Testing Set Target:\n",
      "PriceDt\n",
      "2023-04-30    28.89\n",
      "2023-05-01    29.28\n",
      "2023-05-02    29.04\n",
      "2023-05-03    28.16\n",
      "2023-05-04    27.86\n",
      "              ...  \n",
      "2024-07-04    40.93\n",
      "2024-07-05    40.90\n",
      "2024-07-06    40.90\n",
      "2024-07-07    40.41\n",
      "2024-07-08    40.62\n",
      "Freq: D, Name: close, Length: 436, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "# Assuming your DataFrame is named df_filled \n",
    "df_filled.sort_index(inplace=True)\n",
    "# Calculate the index for splitting\n",
    "split_idx = int(len(df_filled) * 0.8)\n",
    "# Split the DataFrame into training and testing sets\n",
    "train_df = df_filled.iloc[:split_idx]\n",
    "test_df = df_filled.iloc[split_idx:]\n",
    "# Separate the features and the target column 'Close'\n",
    "X_train = train_df.drop(columns=['close'])\n",
    "y_train = train_df['close']\n",
    "X_test = test_df.drop(columns=['close'])\n",
    "y_test = test_df['close']\n",
    "\n",
    "print(\"Training Set Features:\")\n",
    "print(X_train)\n",
    "print(\"\\nTraining Set Target:\")\n",
    "print(y_train)\n",
    "print(\"\\nTesting Set Features:\")\n",
    "print(X_test)\n",
    "print(\"\\nTesting Set Target:\")\n",
    "print(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "20d351f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training features\n",
      "[[4.73300000e+03 3.08300000e+01 3.08500000e+01 ... 2.85266008e+01\n",
      "  2.17301872e+01 0.00000000e+00]\n",
      " [4.73300000e+03 3.08300000e+01 3.08500000e+01 ... 2.85266008e+01\n",
      "  2.17301872e+01 0.00000000e+00]\n",
      " [4.73300000e+03 3.08300000e+01 3.08500000e+01 ... 2.85266008e+01\n",
      "  2.17301872e+01 0.00000000e+00]\n",
      " ...\n",
      " [4.73300000e+03 2.88414707e+01 2.87600000e+01 ... 2.91945000e+01\n",
      "  2.73781593e+01 1.39093005e-01]\n",
      " [4.73300000e+03 2.91448286e+01 2.85300000e+01 ... 2.92470000e+01\n",
      "  2.75379763e+01 8.63397523e-02]\n",
      " [4.73300000e+03 2.91448286e+01 2.85300000e+01 ... 2.92995000e+01\n",
      "  2.77122949e+01 4.40249275e-02]]\n",
      "Testing features\n",
      "[[ 4.73300000e+03  2.91448286e+01  2.85300000e+01 ...  2.93470000e+01\n",
      "   2.78786949e+01  1.03705783e-02]\n",
      " [ 4.73300000e+03  2.92350917e+01  2.95000000e+01 ...  2.93755000e+01\n",
      "   2.79374388e+01  1.49961386e-02]\n",
      " [ 4.73300000e+03  2.81192698e+01  2.95000000e+01 ...  2.93920000e+01\n",
      "   2.79787306e+01 -6.96042160e-04]\n",
      " ...\n",
      " [ 4.73300000e+03  4.05384726e+01  4.10200000e+01 ...  4.00765000e+01\n",
      "   3.89805885e+01  3.40882420e-01]\n",
      " [ 4.73300000e+03  4.04100000e+01  4.09300000e+01 ...  4.01215000e+01\n",
      "   3.90498898e+01  3.15432914e-01]\n",
      " [ 4.73300000e+03  4.05901684e+01  4.09300000e+01 ...  4.01530000e+01\n",
      "   3.90608250e+01  3.08651302e-01]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from sklearn.impute import SimpleImputer\n",
    "# Impute missing values in the training and test sets\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "X_train_imputed = imputer.fit_transform(X_train)\n",
    "X_test_imputed = imputer.transform(X_test)\n",
    "print('Training features')\n",
    "print(X_train_imputed)\n",
    "print('Testing features')\n",
    "print(X_test_imputed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "266cfc46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 0.64\n",
      "Mean Squared Error (MSE): 0.64\n",
      "Root Mean Squared Error (RMSE): 0.80\n",
      "R-squared (R2): 0.97\n"
     ]
    }
   ],
   "source": [
    "# Train a simple linear regression model\n",
    "model = LinearRegression()\n",
    "model.fit(X_train_imputed, y_train)\n",
    "# Make predictions on the test set\n",
    "y_pred = model.predict(X_test_imputed)\n",
    "# Calculate error metrics\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "# Display the results\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.2f}\")\n",
    "print(f\"R-squared (R2): {r2:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8a6b883b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Optionally, plot the predictions vs actual values\n",
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(test_df.index, y_test, label='Actual', marker='o')\n",
    "plt.plot(test_df.index, y_pred, label='Predicted', marker='x')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Close Price')\n",
    "plt.title('Actual vs Predicted Close Prices')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "69fc49b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting LinearRegression\n",
      "  Downloading LinearRegression-0.0.1-py3-none-any.whl (2.7 kB)\n",
      "Installing collected packages: LinearRegression\n",
      "Successfully installed LinearRegression-0.0.1\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "8fff898d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature columns: Index(['AstId', 'CurrPrc', 'OpenPrc', 'high', 'low', 'volume',\n",
      "       'Bollinger_Upper', 'Bollinger_Middle', 'Bollinger_Lower', 'MACD_Line',\n",
      "       'MACD_Signal', 'MACD_Hist', 'MACD', 'RSI', '10-day-MA', '50-day-MA'],\n",
      "      dtype='object')\n",
      "Number of features: 16\n",
      "Predicted next day's closing price: 8694.62416541559\n"
     ]
    }
   ],
   "source": [
    "# Define the feature columns and target column\n",
    "feature_cols = ['AstId','CurrPrc','OpenPrc', 'high', 'low', 'volume', 'Bollinger_Upper', 'Bollinger_Middle', 'Bollinger_Lower', \n",
    "                'MACD_Line', 'MACD_Signal', 'MACD_Hist','MACD', 'RSI','10-day-MA','50-day-MA']\n",
    "target_col = 'close'\n",
    "# Check for NaN values and fill them\n",
    "df_filled[feature_cols] = df_filled[feature_cols].fillna(method='ffill').fillna(method='bfill')\n",
    "X = df_filled[feature_cols]\n",
    "y = df_filled[target_col]\n",
    "# Check the shape and columns of X\n",
    "print(f\"Feature columns: {X.columns}\")\n",
    "print(f\"Number of features: {X.shape[1]}\")\n",
    "# Predict the next day's closing price\n",
    "next_day_features = X.iloc[-1].values.reshape(1, -1)\n",
    "next_day_prediction = model.predict(next_day_features)\n",
    "print(f\"Predicted next day's closing price: {next_day_prediction[0]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75fbea05",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
